One could fit an exponential in many different ways. This post suggests doing the down-and-dirty lm on the log of the response variable. This SO post suggests using nls which requires a starting estimate. This SO post suggests glm with a gamma/log link function. Here, the illustrious @Glen-b explains some potential differences between approaches...What are the pros/cons and domains of applicability for these different approaches? Do these methods differ in how well or in what way they calculate confidence intervals?..Like all the other data scientists at home right now, I'm messing around with Covid 19 data...One thing in particular I noticed is that I can do lm with log, log10, log2 etc., but would have to convert from natural log with glm.....library(tidyverse).library(magrittr).#&gt; .#&gt; Attaching package: 'magrittr'.#&gt; The following object is masked from 'package:purrr':.#&gt; .#&gt;     set_names.#&gt; The following object is masked from 'package:tidyr':.#&gt; .#&gt;     extract.library(ggplot2).library(gridExtra).#&gt; .#&gt; Attaching package: 'gridExtra'.#&gt; The following object is masked from 'package:dplyr':.#&gt; .#&gt;     combine.library(broom)..covid_raw = read.csv(.  # file=url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv"),.  file=url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv"),.  header=T,.  stringsAsFactors=F,.  check.names = T.)..covid_world = .  covid_raw %&gt;%.  select(starts_with("X")) %&gt;%.  summarize_all(sum) %&gt;%.  set_rownames('World') %&gt;%.  ### Transpose to make countries the columns.  t() %&gt;%.  data.frame(stringsAsFactors = F) %&gt;%.  rownames_to_column("Date") %&gt;%.  mutate(Date =  str_remove(Date, "X") %&gt;% as.Date(format="%m.%d.%y")) %&gt;%.  mutate_at(vars(-Date), ~as.numeric(.))..covid =.  covid_raw %&gt;%.  select(Country.Region, starts_with("X")) %&gt;%.  group_by(Country.Region) %&gt;%.  summarize_all(sum) %&gt;%.  mutate(Country.Region = make.names(Country.Region)) %&gt;%.  column_to_rownames("Country.Region") %&gt;%.  ### Transpose to make countries the columns.  t() %&gt;%.  data.frame(stringsAsFactors = F) %&gt;%.  rownames_to_column("Date") %&gt;%.  mutate(Date =  str_remove(Date, "X") %&gt;% as.Date(format="%m.%d.%y")) %&gt;%.  mutate_at(vars(-Date), ~as.numeric(.)) %&gt;%.  ### Add In World.  inner_join(covid_world, by="Date") %&gt;%.  mutate(days = .           difftime(Date, min(Date), units="days") %&gt;%.           as.numeric().         )..last_14 = .  covid %&gt;%.  select(World, US, days) %&gt;%.  tail(14) %&gt;%.  mutate(days = days - min(days))..print(last_14).#&gt;    World  US days.#&gt; 1   3460  14    0.#&gt; 2   3558  17    1.#&gt; 3   3802  21    2.#&gt; 4   3988  22    3.#&gt; 5   4262  28    4.#&gt; 6   4615  36    5.#&gt; 7   4720  40    6.#&gt; 8   5404  47    7.#&gt; 9   5819  54    8.#&gt; 10  6440  63    9.#&gt; 11  7126  85   10.#&gt; 12  7905 108   11.#&gt; 13  8733 118   12.#&gt; 14  9867 200   13..lm(log(World) ~ days, last_14).#&gt; .#&gt; Call:.#&gt; lm(formula = log(World) ~ days, data = last_14).#&gt; .#&gt; Coefficients:.#&gt; (Intercept)         days  .#&gt;     8.06128      0.08142..glm(formula = World ~ days,  data=last_14, family=gaussian(link='log')).#&gt; .#&gt; Call:  glm(formula = World ~ days, family = gaussian(link = "log"), .#&gt;     data = last_14).#&gt; .#&gt; Coefficients:.#&gt; (Intercept)         days  .#&gt;     8.00911      0.08819  .#&gt; .#&gt; Degrees of Freedom: 13 Total (i.e. Null);  12 Residual.#&gt; Null Deviance:       54450000 .#&gt; Residual Deviance: 816200    AIC: 199.4..nls(World ~ exp(a + b*days), last_14, start=list(a=5, b=0.03)).#&gt; Nonlinear regression model.#&gt;   model: World ~ exp(a + b * days).#&gt;    data: last_14.#&gt;       a       b .#&gt; 8.00911 0.08819 .#&gt;  residual sum-of-squares: 816246.#&gt; .#&gt; Number of iterations to convergence: 8 .#&gt; Achieved convergence tolerance: 1.25e-06..# models = data.frame(.#   days = last_14$days,.#   lm = exp(2.59 + 0.188*last_14$days),.#   glm = exp(8.009 + 0.088*last_14$days),.#   nls = exp(8.01 + 0.0819*last_14$days).# ).# .# models %&gt;%.#   ggplot() + .#   geom_point(aes(x=days, y=lm, color="lm")) + .#   geom_point(aes(x=days, y=glm, color="glm"))...Created on 2020-03-20 by the reprex package (v0.3.0).
